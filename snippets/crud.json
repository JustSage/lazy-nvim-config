{
  "CRUD Mongo": {
    "prefix": "crudmongocontroller",
    "body": [
      "const express = require('express');",
      "const mongoose = require('mongoose');",
      "const ${1:ModelName} = require('../models/${1:ModelName}');",
      "",
      "// GET CONTROLLERS",
      "const read${1:ModelName} = async (req, res) => {",
      "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "    ",
      "    try {",
      "        const ${2:VariableName} = await ${1:ModelName}.findById(${2:VariableName}Id);",
      "        return ${2:VariableName}",
      "        ? res.status(200).json({ ${2:VariableName} })",
      "         : res.status(404).json({ message: '${1:ModelName} not found' });",
      "    } catch (error) {",
      "        return res.status(500).json({ error });",
      "    }",
      "};",
      "const readAll${1:ModelName}s = async (_, res) => {",
      "    try {",
      "        const ${2:VariableName}s = await ${1:ModelName}.find({});",
      "        return res.status(200).json({ ${2:VariableName}s });",
      "    } catch (error) {",
      "        return res.status(500).json({ error });",
      "    }",
      "};",
      "",
      "// POST CONTROLLERS",
      "const create${1:ModelName} = async (req, res) => {",
      "     const { ${3:StartName} } = req.body;",
      "    const ${2:VariableName} = new ${1:ModelName}({",
      "        _id: new mongoose.Types.ObjectId(),",
      "       ${3:StartName}",
      "    });",
      "",
      "    try {",
      "        await ${2:VariableName}.save();",
      "        return res.status(201).json({ ${2:VariableName} });",
      "    } catch (error) {",
      "        return res.status(500).json({ error });",
      "    }",
      "};",
      "",
      "// PATCH CONTROLLERS",
      "const update${1:ModelName} = async (req, res) => {",
      "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "    try {",
      "        // finding the ${2:VariableName} by id",
      "        const ${2:VariableName} = await ${1:ModelName}.findById(${2:VariableName}Id);",
      "        if (${2:VariableName}) {",
      "            try {",
      "                ${2:VariableName}.set(req.body);",
      "                await ${2:VariableName}.save();",
      "                return res.status(201).json({ ${2:VariableName} });",
      "            } catch (error) {",
      "                res.status(500).json({ error });",
      "            }",
      "        } else {",
      "            res.status(404).json({ message: '${1:ModelName} not found' });",
      "        }",
      "    } catch (error) {",
      "        res.status(500).json({ error });",
      "    }",
      "};",
      "",
      "// DELETE CONTROLLERS",
      "const delete${1:ModelName} = async (req, res) => {",
      "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "",
      "    try {",
      "        await ${1:ModelName}.findByIdAndDelete(${2:VariableName}Id);",
      "        return res.status(201).json({",
      "            message: ${2:VariableName}Id + 'Deleted from database!'",
      "        });",
      "    } catch (error) {",
      "        return res.status(500).json({ message: '${1:ModelName} not found' });",
      "    }",
      "};",
      "",
      "module.exports = {",
      "    create${1:ModelName},",
      "    read${1:ModelName},",
      "    readAll${1:ModelName}s,",
      "    update${1:ModelName},",
      "    delete${1:ModelName},",
      "};"
    ]
  },
  "CRUD Mongo Routes": {
    "prefix": "crudmongoroutes",
    "body": [
      "const express = require('express');",
      "const controller = require('../controllers/${1:ModelName}');",
      "",
      "const router = express.Router();",
      "",
      "router.post('/create/', controller.create${1:ModelName});",
      "router.get('/get/:${2:VariableName}Id', controller.read${1:ModelName});",
      "router.get('/get/', controller.readAll${1:ModelName}s);",
      "router.patch('/update/:${2:VariableName}Id', controller.update${1:ModelName});",
      "router.delete('/delete/:${2:VariableName}Id', controller.delete${1:ModelName});",
      "",
      "module.exports = router;"
    ]
  },
  "Express": {
    "prefix": "expressinit",
    "body": [
      "const express = require('express');",
      "const http = require('http');",
      "const router = express();",
      "const port = process.env.port;",
      "",
      "router.use(express.urlencoded({ extended: true }));",
      "router.use(express.json());",
      "",
      "const StartServer = () => {",
      "    /** Set Headers */",
      "    router.use((req, res, next) => {",
      "        res.header('Access-Control-Allow-Origin', '*');",
      "        res.header(",
      "            'Access-Control-Allow-Headers',",
      "            'Origin, X-Requested-With, Content-Type, Accept, Authorization'",
      "        );",
      "    ",
      "        if (req.method == 'OPTIONS') {",
      "            res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET');",
      "            return res.status(200).json({});",
      "        }",
      "        next();",
      "    });",
      "",
      " /** Healthcheck */",
      "router.get('/ping', (req, res, next) =>",
      "res.status(200).json({ message: 'pong' })",
      ");",
      "",
      "/** Error Handling */",
      "router.use((req, res, next) => {",
      "\tconst error = new Error('not found');",
      "\tconsole.log(error);",
      "\treturn res.status(404).json({ message: error.message });",
      "});",
      "",
      "/** Run sever and  */",
      "http",
      "\t.createServer(router)",
      "\t.listen(port, () =>",
      "\t\tconsole.log('Server is running on port ' + port)",
      "\t);",
      "};",
      "",
      "StartServer();"
    ]
  }
}
